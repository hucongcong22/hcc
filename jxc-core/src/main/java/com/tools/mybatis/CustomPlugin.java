package com.tools.mybatis;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.ShellRunner;
import org.mybatis.generator.api.dom.java.*;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;

import java.util.List;

/**
 * Created by libiao on 2017/1/7.
 */
public class CustomPlugin extends PluginAdapter {
    private String interfaceGeneratedComment = "/**\n" +
            "     * This method was generated by MyBatis Generator.\n" +
            "     * This method corresponds to the database table appointment\n" +
            "     *\n" +
            "     * @mbg.generated\n" +
            "     */";
    private String sqlGeneratedComment = "<!--\n" +
            "      WARNING - @mbg.generated\n" +
            "      This element is automatically generated by MyBatis Generator, do not modify.\n" +
            "    -->";

    @Override
    public boolean validate(List<String> list) {
        return true;
    }

    @Override
    public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass, IntrospectedTable introspectedTable) {
        List<Method> methods = interfaze.getMethods();
        //selectsBySelective
        Method method = new Method();
        interfaze.addImportedType(new FullyQualifiedJavaType("java.util.List"));
        interfaze.addImportedType(new FullyQualifiedJavaType("Page"));
        method.setName("selectsBySelective");
        String className = new FullyQualifiedJavaType(introspectedTable.getBaseRecordType()).getShortName();
        method.addParameter(new Parameter(new FullyQualifiedJavaType("@Param(\"record\")" + className), "record"));
        method.addParameter(new Parameter(new FullyQualifiedJavaType("Page"), "page"));
        FullyQualifiedJavaType returnType = new FullyQualifiedJavaType("List<" + className + ">");
        method.setReturnType(returnType);
        method.addJavaDocLine(interfaceGeneratedComment);
        methods.add(method);
        //selectsByOneKey()
        method = new Method();
        interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.Param"));
        interfaze.addImportedType(new FullyQualifiedJavaType("com.aifule.jxc.core.mybatispage.Page"));
        method.setReturnType(returnType);
        method.setName("selectsByOneKey");
        method.addParameter(new Parameter(new FullyQualifiedJavaType("@Param(\"name\")String"), "name"));
        method.addParameter(new Parameter(new FullyQualifiedJavaType("@Param(\"value\")Object"), "value"));
        method.addParameter(new Parameter(new FullyQualifiedJavaType("Page"), "page"));
        method.addJavaDocLine(interfaceGeneratedComment);
        methods.add(method);
        return super.clientGenerated(interfaze, topLevelClass, introspectedTable);
    }

    @Override
    public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
        String tableName = introspectedTable.getAliasedFullyQualifiedTableNameAtRuntime();// 数据库表名
        List<IntrospectedColumn> columns = introspectedTable.getAllColumns();
        XmlElement parentElement = document.getRootElement();

        // 添加where_anyone
        XmlElement sql = new XmlElement("sql");
        sql.addAttribute(new Attribute("id", "sql_where_any"));
        sql.addElement(new TextElement(sqlGeneratedComment));
        XmlElement where = new XmlElement("where");
        StringBuilder sb = new StringBuilder();
        for (IntrospectedColumn introspectedColumn : introspectedTable.getNonPrimaryKeyColumns()) {
            XmlElement isNotNullElement = new XmlElement("if");
            sb.setLength(0);
            sb.append("record." + introspectedColumn.getJavaProperty());
            sb.append(" != null");
            isNotNullElement.addAttribute(new Attribute("test", sb.toString()));
            where.addElement(isNotNullElement);

            sb.setLength(0);
            sb.append(" and ");
            sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(introspectedColumn));
            sb.append(" = ");
            sb.append("#{record." + introspectedColumn.getJavaProperty() + "}");
            isNotNullElement.addElement(new TextElement(sb.toString()));
        }
        sql.addElement(where);
        parentElement.addElement(sql);

        //添加selectsBySelective
        XmlElement select = new XmlElement("select");
        select.addAttribute(new Attribute("id", "selectsBySelective"));
        select.addAttribute(new Attribute("resultMap", "BaseResultMap"));
        select.addAttribute(new Attribute("parameterType", introspectedTable.getBaseRecordType()));
        select.addElement(new TextElement(sqlGeneratedComment));
        select.addElement(new TextElement(" select * from " + introspectedTable.getFullyQualifiedTableNameAtRuntime()));

        XmlElement include = new XmlElement("include");
        include.addAttribute(new Attribute("refid", "sql_where_any"));

        select.addElement(include);
        parentElement.addElement(select);

        select = new XmlElement("select");
        select.addAttribute(new Attribute("id", "selectsByOneKey"));
        select.addAttribute(new Attribute("resultMap", "BaseResultMap"));
        select.addElement(new TextElement(sqlGeneratedComment));
        select.addElement(new TextElement("select * from " + introspectedTable.getFullyQualifiedTableNameAtRuntime() + " where ${name}=#{value}"));
        parentElement.addElement(select);

        return super.sqlMapDocumentGenerated(document, introspectedTable);
    }


    public static void generate() {
        String config = CustomPlugin.class.getClassLoader().getResource("generatorConfig.xml").getFile();
        String[] arg = {"-configfile", config, "-overwrite"};
        ShellRunner.main(arg);
    }

    public static void main(String[] args) {
        generate();
    }
}
